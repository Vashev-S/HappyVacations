<div class="valcation-table">
    <table>
        <thead>
            <tr>
                <th></th>
                <th>Месяц</th>
                <th></th>
                <th></th>

                @for (var item = Start; item <= End; item = item.AddMonths(1))
                {
                    <th colspan="@DateTime.DaysInMonth(item.Year, item.Month)">@item.ToString("MMMM")</th>
                }
                <th></th>
                <th></th>
            </tr>
            <tr>

                <th>Имя</th>
                <th>Роль</th>
                <th>Дней</th>
                <th>Инд</th>
                @for (var item = Start.Date; item <= End; item = item.AddDays(1))
                {
                    <th class="@GetHeaderCellClass(item)">@item.ToString("dd")</th>
                }
                <th>Рабочих дней</th>
                <th>Доступные SP на фичи</th>
            </tr>
        </thead>
        <tbody>

            @foreach (var role in Employees.OrderBy(e => e.Role).ThenBy(e => e.Name).GroupBy(r => r.Role))
            {

                @foreach (var employee in role)
                {


                    <tr>

                        <td>@employee.Name <FluentIcon Icon="Icons.Regular.Size16.Edit" Color="@Color.Accent" OnClick="@(async _ => await EditEmployee.InvokeAsync(employee))" /> </td>

                        <td>@employee.Role</td>
                        <td>@VacationCalculatorService.TotalDays(employee, Start, End)</td>
                        <td>@VacationCalculatorService.SalaryIndex(employee, Start, End, CalendarExceptions).ToString("0.00")</td>

                        @for (var item = Start.Date; item <= End; item = item.AddDays(1))
                        {

                            var day = employee.Items.FirstOrDefault(i => i.Date.Date == item);
                            var tuple = new Tuple<Employee, DateTime>(employee, new DateTime(item.Year, item.Month, item.Day));
                            var error = VacationCalculatorService.Validate(employee, day, CalendarExceptions);

                            <td class="@GetCellClass(day) @(error.HasError ? " error":"")" @onclick=@(async _=> await EditDateCell.InvokeAsync(tuple)) title="@error.Message">

                                @if (day is not null)
                                {
                                    <strong>@day</strong>
                                }
                            </td>
                        }

                        <td>@VacationCalculatorService.GetWorkDaysInPeriod(employee, Start, End, CalendarExceptions)</td>
                        <td>@VacationCalculatorService.GetAvailableSpDays(employee, Team, Start, End, CalendarExceptions)</td>
                    </tr>

                }

                @if (role.Count() > 1)
                {
                    <tr>
                        <td></td>
                        <td style="font-style:italic">Пересечения\Итого</td>
                        <td></td>
                        <td></td>

                        @for (var item = Start.Date; item <= End; item = item.AddDays(1))
                        {

                            var count = role.Count(e => e.Items.Any(i => i.Date.Date == item && !i.Cancelled && i.ItemType == VacationItemType.Regular));

                            <td class="warning-@count">
                                @(count > 1 ? count.ToString() : string.Empty)
                            </td>
                        }
                        <td></td>

                    </tr>
                }

            }
        </tbody>
    </table>
</div>

@inject IDialogService DialogService
@inject VacationCalculatorService VacationCalculatorService

@code {
    [Parameter]
    public List<Employee> Employees { get; set; } = default!;

    [Parameter]
    public IEnumerable<CalendarException> CalendarExceptions { get; set; } = Array.Empty<CalendarException>();

    [Parameter]
    public DateTime Start { get; set; } = default!;

    [Parameter]
    public DateTime End { get; set; } = default!;

    [Parameter]
    public EventCallback<Employee> EditEmployee { get; set; }

    [Parameter]
    public Team Team { get; set; }

    [Parameter]
    public EventCallback<Tuple<Employee, DateTime>> EditDateCell { get; set; }

    string GetHeaderCellClass(DateTime date)
    {
        var exception = CalendarExceptions.FirstOrDefault(d => d.Date.Date == date.Date);

        if (exception is not null)
        {
            return exception.ExceptionType == CalendarExceptionType.Weekend ? "weekend" : string.Empty;
        }

        if (date.DayOfWeek == DayOfWeek.Saturday || date.DayOfWeek == DayOfWeek.Sunday)
        {
            return "weekend";
        }

        return string.Empty;
    }

    string GetCellClass(VacationItem? item)
    {
        if (item is not null)
        {
            if (item.Cancelled)
            {
                return string.Empty;
            }

            return item.ItemType.ToString();
        }

        return string.Empty;
    }

}
