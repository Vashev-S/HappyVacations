@page "/{teamId}/{teamName}"

@if (team is not null)
{
    <div>
        <div class="page-header ">
            <div class="d-flex align-items-center period-selector">
                Период с
                <FluentDatePicker Value=Start ValueChanged="@(d=> Start = new DateTime(d.Value.Year, d.Value.Month, 1))" /> по
                <FluentDatePicker Value=End ValueChanged="@(d=> End = new DateTime(d.Value.Year, d.Value.Month, DateTime.DaysInMonth(d.Value.Year, d.Value.Month)))" />
            </div>
            <div class="d-flex align-items-center">
                <FluentLabel Class="mr-1">Вид</FluentLabel>
                <FluentSelect TOption=bool ValueChanged="@(c=> listView = bool.Parse(c))" class="mr-1">
                    <FluentOption Value=true>Все сотрудники</FluentOption>
                    <FluentOption Value=false>Один сотрудник</FluentOption>
                </FluentSelect>

                <FluentButton Appearance="Appearance.Accent" OnClick="AddNewEmployee">Добавить сотрудника</FluentButton>
            </div>
        </div>

        @if (listView)
        {
            <div class="container">
                <TableView Employees="@Employees" Start="@Start" End="@End.Value" Team="@team" CalendarExceptions="@CalendarExceptions" EditEmployee="EditEmployee" EditDateCell="@EditDateCell" />
            </div>
        }
        else
        {
            <div class="container mt-1">
                <CalendarView Employees="@Employees" Start="@Start" End="@End.Value" CalendarExceptions="@CalendarExceptions" EditDateCell="@EditDateCell" />
            </div>
        }

        <div class="legend container mt-1">
            <div>
                <span class="Regular">O</span> - Отпуск
            </div>
            <div>
                <span class="DonorDay">Д</span> - Донорский
            </div>
            <div>
                <span class="NonPayed">С</span> - За свой счёт
            </div>
            <div>
                <span class="">Х</span> - Отменён\Перенесён
            </div>
        </div>

    </div>
}
else
{
    <div>404 - Not Found</div>
}

@inject IDialogService DialogService
@inject IRepository repository

@code {
    public List<Employee> Employees { get; set; }

    public List<CalendarException> CalendarExceptions { get; set; }

    public DateTime Start { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month - 1, 1);
    public DateTime? End { get; set; } = new DateTime(DateTime.Now.Year, 12, 31);// new DateTime(DateTime.Now.Year, 12, 31);
    public bool listView { get; set; } = true;

    [Parameter]
    public string TeamId { get; set; }
    [Parameter]
    public string TeamName { get; set; }

    Team? team;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        team = await repository.GetTeam(TeamId, TeamName);
        CalendarExceptions = await repository.GetCalendarExpeptions();

        Employees = await repository.GetEmployees(TeamId);
    }

    private async Task AddNewEmployee()
    {
        var item = new Employee() { TeamId = team.Id };

        DialogParameters<Employee> parameters = new()
            {
                Title = $"Добавить нового сотрудника",
                PrimaryAction = null,
                SecondaryAction = null,
                PrimaryActionEnabled = false,
                SecondaryActionEnabled = false,
                Width = "400px",
                Height = "400px",
                Content = item
            };

        IDialogReference dialog = await DialogService.ShowDialogAsync<EmployeeEditor, Employee>(parameters);
        DialogResult? result = await dialog.Result;


        if (result.Data is bool b && b)
        {
            Employees.Add(item);
            await repository.SaveEmployee(item);

        }
    }

    private async Task EditEmployee(Employee employee)
    {
        var item = new Employee() { Name = employee.Name, Role = employee.Role };

        DialogParameters<Employee> parameters = new()
            {
                Title = $"Изменить сотрудника",
                PrimaryAction = null,
                SecondaryAction = null,
                PrimaryActionEnabled = false,
                SecondaryActionEnabled = false,
                Width = "400px",
                Height = "400px",
                Content = item
            };

        IDialogReference dialog = await DialogService.ShowDialogAsync<EmployeeEditor, Employee>(parameters);
        DialogResult? result = await dialog.Result;


        if (result.Data is bool b && b)
        {
            employee.Name = item.Name;
            employee.Role = item.Role;

            await repository.SaveEmployee(employee);
        }
    }

    private async Task EditDateCell(Tuple<Employee, DateTime> tuple)
    {
        var employee = tuple.Item1;
        var date = tuple.Item2.Date;
        var item = employee.Items.FirstOrDefault(i => i.Date.Date == date);
        if (item is null)
        {
            employee.Items.Add(new VacationItem { Date = date });
            await repository.SaveEmployee(employee);
        }
        else
        {
            var editedItem = new VacationItem() { Date = item.Date, Cancelled = item.Cancelled, ItemType = item.ItemType };

            DialogParameters<VacationItem> parameters = new()
                {
                    Title = $"Изменить день",
                    PrimaryAction = null,
                    SecondaryAction = null,
                    PrimaryActionEnabled = false,
                    SecondaryActionEnabled = false,
                    Width = "400px",
                    Height = "400px",
                    Content = editedItem
                };

            IDialogReference dialog = await DialogService.ShowDialogAsync<VacationItemEditor, VacationItem>(parameters);
            DialogResult? result = await dialog.Result;

            if (result.Data is bool b && b)
            {
                employee.Items.Remove(item);
                await repository.SaveEmployee(employee);

            }
            else if (result.Data is VacationItem)
            {
                item.Cancelled = editedItem.Cancelled;
                item.ItemType = editedItem.ItemType;
                await repository.SaveEmployee(employee);

            }

        }
    }

}
