@page "/"

Период с
<FluentDatePicker Value=Start ValueChanged="@(d=> Start = new DateTime(d.Value.Year, d.Value.Month, 1))" /> по
<FluentDatePicker Value=End ValueChanged="@(d=> End = new DateTime(d.Value.Year, d.Value.Month, DateTime.DaysInMonth(d.Value.Year, d.Value.Month)))" />

<FluentButton OnClick="AddNewEmployee">Добавить нового сотрудника</FluentButton>


<TableView Employees="@Employees" Start="@Start" End="@End.Value" CalendarExceptions="@CalendarExceptions" EditEmployee="EditEmployee" EditDateCell="@EditDateCell"/>
<CalendarView Employees="@Employees" Start="@Start" End="@End.Value" CalendarExceptions="@CalendarExceptions" EditDateCell="@EditDateCell" />

@inject IDialogService DialogService

@code {
    public List<Employee> Employees { get; set; } = new List<Employee>
    {
        new Employee { Name = "Peppe", Items = new()
        {
            new VacationItem { Date = new(2023, 01, 10) },
            new VacationItem { Date = new(2023, 05, 11) },
            new VacationItem { Date = new(2023, 05, 12) },
            new VacationItem { Date = new(2023, 06, 01) },
            new VacationItem { Date = new(2023, 09, 19) },
            new VacationItem { Date = new(2023, 09, 20), ItemType = VacationItemType.NonPayed },
            new VacationItem { Date = new(2023, 09, 21), ItemType = VacationItemType.DonorDay },
            new VacationItem { Date = new(2023, 09, 22), Cancelled = true },
        } }
    };

    public List<CalendarException> CalendarExceptions = new()
    {
         new DateTime(2023,1,1),new DateTime(2023,1,2),new DateTime(2023,1,3),new DateTime(2023,1,4),new DateTime(2023,1,5),new DateTime(2023,1,6),new DateTime(2023,1,7),new DateTime(2023,1,8),
          new DateTime(2023,2,23),new DateTime(2023,2,24),
          new DateTime(2023,3,8),
          new DateTime(2023,5,1),
          new DateTime(2023,5,8),new DateTime(2023,5,9),
          new DateTime(2023,6,12),
          new DateTime(2023,11,6)
    };

    public DateTime Start { get; set; } = new DateTime(DateTime.Now.Year, DateTime.Now.Month - 1, 1);
    public DateTime? End { get; set; } = new DateTime(DateTime.Now.Year, 12, 31);// new DateTime(DateTime.Now.Year, 12, 31);

    private async Task AddNewEmployee()
    {
        var item = new Employee();

        DialogParameters<Employee> parameters = new()
        {
            Title = $"Добавить нового сотрудника",
            PrimaryAction = null,
            SecondaryAction = null,
            PrimaryActionEnabled = false,
            SecondaryActionEnabled = false,
            Width = "400px",
            Height = "400px",
            Content = item
        };

        IDialogReference dialog = await DialogService.ShowDialogAsync<EmployeeEditor, Employee>(parameters);
        DialogResult? result = await dialog.Result;


        if (result.Data is bool b && b)
        {
            Employees.Add(item);
        }
    }

    private async Task EditEmployee(Employee employee)
    {
        var item = new Employee() { Name = employee.Name, Role = employee.Role };

        DialogParameters<Employee> parameters = new()
            {
                Title = $"Изменить сотрудника",
                PrimaryAction = null,
                SecondaryAction = null,
                PrimaryActionEnabled = false,
                SecondaryActionEnabled = false,
                Width = "400px",
                Height = "400px",
                Content = item
            };

        IDialogReference dialog = await DialogService.ShowDialogAsync<EmployeeEditor, Employee>(parameters);
        DialogResult? result = await dialog.Result;


        if (result.Data is bool b && b)
        {
            employee.Name = item.Name;
            employee.Role = item.Role;
        }
    }

    private async Task EditDateCell(Tuple<Employee, DateTime> tuple)
    {
        var employee = tuple.Item1;
        var date = tuple.Item2;
        var item = employee.Items.FirstOrDefault(i => i.Date.Date == date.Date);
        if (item is null)
        {
            employee.Items.Add(new VacationItem { Date = date.Date });
        }
        else
        {
            var editedItem = new VacationItem() { Date = item.Date, Cancelled = item.Cancelled, ItemType = item.ItemType };

            DialogParameters<VacationItem> parameters = new()
                {
                    Title = $"Изменить день",
                    PrimaryAction = null,
                    SecondaryAction = null,
                    PrimaryActionEnabled = false,
                    SecondaryActionEnabled = false,
                    Width = "400px",
                    Height = "400px",
                    Content = editedItem
                };

            IDialogReference dialog = await DialogService.ShowDialogAsync<VacationItemEditor, VacationItem>(parameters);
            DialogResult? result = await dialog.Result;

            if (result.Data is bool b && b)
            {
                employee.Items.Remove(item);
            }
            else if (result.Data is VacationItem)
            {
                item.Cancelled = editedItem.Cancelled;
                item.ItemType = editedItem.ItemType;
            }

        }
    }

}
